/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.6.1
// source: backend.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as backend_pb from './backend_pb';


export class BackendClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorListRequests = new grpcWeb.MethodDescriptor(
    '/Backend/ListRequests',
    grpcWeb.MethodType.UNARY,
    backend_pb.ListRequestsRequest,
    backend_pb.ListRequestsResponse,
    (request: backend_pb.ListRequestsRequest) => {
      return request.serializeBinary();
    },
    backend_pb.ListRequestsResponse.deserializeBinary
  );

  listRequests(
    request: backend_pb.ListRequestsRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_pb.ListRequestsResponse>;

  listRequests(
    request: backend_pb.ListRequestsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_pb.ListRequestsResponse) => void): grpcWeb.ClientReadableStream<backend_pb.ListRequestsResponse>;

  listRequests(
    request: backend_pb.ListRequestsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_pb.ListRequestsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Backend/ListRequests',
        request,
        metadata || {},
        this.methodDescriptorListRequests,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Backend/ListRequests',
    request,
    metadata || {},
    this.methodDescriptorListRequests);
  }

  methodDescriptorGetRequest = new grpcWeb.MethodDescriptor(
    '/Backend/GetRequest',
    grpcWeb.MethodType.UNARY,
    backend_pb.GetRequestRequest,
    backend_pb.GetRequestResponse,
    (request: backend_pb.GetRequestRequest) => {
      return request.serializeBinary();
    },
    backend_pb.GetRequestResponse.deserializeBinary
  );

  getRequest(
    request: backend_pb.GetRequestRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_pb.GetRequestResponse>;

  getRequest(
    request: backend_pb.GetRequestRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_pb.GetRequestResponse) => void): grpcWeb.ClientReadableStream<backend_pb.GetRequestResponse>;

  getRequest(
    request: backend_pb.GetRequestRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_pb.GetRequestResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Backend/GetRequest',
        request,
        metadata || {},
        this.methodDescriptorGetRequest,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Backend/GetRequest',
    request,
    metadata || {},
    this.methodDescriptorGetRequest);
  }

  methodDescriptorUpdateRequest = new grpcWeb.MethodDescriptor(
    '/Backend/UpdateRequest',
    grpcWeb.MethodType.UNARY,
    backend_pb.UpdateRequestRequest,
    backend_pb.UpdateRequestResponse,
    (request: backend_pb.UpdateRequestRequest) => {
      return request.serializeBinary();
    },
    backend_pb.UpdateRequestResponse.deserializeBinary
  );

  updateRequest(
    request: backend_pb.UpdateRequestRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_pb.UpdateRequestResponse>;

  updateRequest(
    request: backend_pb.UpdateRequestRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_pb.UpdateRequestResponse) => void): grpcWeb.ClientReadableStream<backend_pb.UpdateRequestResponse>;

  updateRequest(
    request: backend_pb.UpdateRequestRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_pb.UpdateRequestResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Backend/UpdateRequest',
        request,
        metadata || {},
        this.methodDescriptorUpdateRequest,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Backend/UpdateRequest',
    request,
    metadata || {},
    this.methodDescriptorUpdateRequest);
  }

  methodDescriptorDeleteRequest = new grpcWeb.MethodDescriptor(
    '/Backend/DeleteRequest',
    grpcWeb.MethodType.UNARY,
    backend_pb.DeleteRequestRequest,
    backend_pb.DeleteRequestResponse,
    (request: backend_pb.DeleteRequestRequest) => {
      return request.serializeBinary();
    },
    backend_pb.DeleteRequestResponse.deserializeBinary
  );

  deleteRequest(
    request: backend_pb.DeleteRequestRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_pb.DeleteRequestResponse>;

  deleteRequest(
    request: backend_pb.DeleteRequestRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_pb.DeleteRequestResponse) => void): grpcWeb.ClientReadableStream<backend_pb.DeleteRequestResponse>;

  deleteRequest(
    request: backend_pb.DeleteRequestRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_pb.DeleteRequestResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Backend/DeleteRequest',
        request,
        metadata || {},
        this.methodDescriptorDeleteRequest,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Backend/DeleteRequest',
    request,
    metadata || {},
    this.methodDescriptorDeleteRequest);
  }

  methodDescriptorGetUserInfo = new grpcWeb.MethodDescriptor(
    '/Backend/GetUserInfo',
    grpcWeb.MethodType.UNARY,
    backend_pb.GetUserInfoRequest,
    backend_pb.GetUserInfoResponse,
    (request: backend_pb.GetUserInfoRequest) => {
      return request.serializeBinary();
    },
    backend_pb.GetUserInfoResponse.deserializeBinary
  );

  getUserInfo(
    request: backend_pb.GetUserInfoRequest,
    metadata: grpcWeb.Metadata | null): Promise<backend_pb.GetUserInfoResponse>;

  getUserInfo(
    request: backend_pb.GetUserInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: backend_pb.GetUserInfoResponse) => void): grpcWeb.ClientReadableStream<backend_pb.GetUserInfoResponse>;

  getUserInfo(
    request: backend_pb.GetUserInfoRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: backend_pb.GetUserInfoResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Backend/GetUserInfo',
        request,
        metadata || {},
        this.methodDescriptorGetUserInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Backend/GetUserInfo',
    request,
    metadata || {},
    this.methodDescriptorGetUserInfo);
  }

}

